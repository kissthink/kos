--- /usr/local/crossgcc/x86_64-pc-elf/include/c++/4.7.2/bits/stl_list.h	2013-05-15 17:51:49.396277403 -0400
+++ mod_stl_list.h	2013-07-21 17:42:44.288029022 -0400
@@ -54,16 +54,17 @@
  *  Do not attempt to use it directly. @headername{list}
  */
 
-#ifndef _STL_LIST_H
-#define _STL_LIST_H 1
+#ifndef _MOD_STL_LIST_H
+#define _MOD_STL_LIST_H 1
 
 #include <bits/concept_check.h>
 #ifdef __GXX_EXPERIMENTAL_CXX0X__
 #include <initializer_list>
 #endif
 
-namespace std _GLIBCXX_VISIBILITY(default)
+namespace modstd _GLIBCXX_VISIBILITY(default)
 {
+#if 0
   namespace __detail
   {
   _GLIBCXX_BEGIN_NAMESPACE_VERSION
@@ -99,7 +100,7 @@
 
   _GLIBCXX_END_NAMESPACE_VERSION
   } // namespace detail
-
+#endif
 _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
 
   /// An actual node in the %list.
@@ -284,7 +285,6 @@
                const _List_const_iterator<_Val>& __y)
     { return __x._M_node != __y._M_node; }
 
-
   /// See bits/stl_deque.h's _Deque_base for an explanation.
   template<typename _Tp, typename _Alloc>
     class _List_base
@@ -331,8 +331,8 @@
       _List_impl _M_impl;
 
       _List_node<_Tp>*
-      _M_get_node()
-      { return _M_impl._Node_alloc_type::allocate(1); }
+      _M_get_node(const _Tp& __x)
+      { return _M_impl._Node_alloc_type::allocate(__x); }
 
       void
       _M_put_node(_List_node<_Tp>* __p)
@@ -379,7 +379,9 @@
       { _M_clear(); }
 
       void
-      _M_clear();
+      _M_clear() {
+        reinterpret_cast<std::_List_base<_Tp,_Alloc>*>(this)->_M_clear();
+      }
 
       void
       _M_init()
@@ -479,7 +481,7 @@
       _Node*
       _M_create_node(const value_type& __x)
       {
-	_Node* __p = this->_M_get_node();
+	_Node* __p = this->_M_get_node(x);
 	__try
 	  {
 	    _M_get_Tp_allocator().construct
@@ -497,7 +499,7 @@
         _Node*
         _M_create_node(_Args&&... __args)
 	{
-	  _Node* __p = this->_M_get_node();
+	  _Node* __p = this->_M_get_node(__args...);
 	  __try
 	    {
 	      _M_get_Node_allocator().construct(__p,
